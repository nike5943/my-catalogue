pipeline{
    agent{
        node{
            label 'AGENT-1'
        }
    }
    environment{
        packageVersion = ''
        nexusUrl = 'ip-address:port-number'
    }
    options{
        ansiColor('xterm')
        timeout(time: 1, unit: 'HOURS')
        disableConcurrentBuilds()
    }
    parameters{
        booleanParam(name: 'Deploy', defaultValue: false, description: 'Toggle this value')
    }
    stages{
        stage('Get the Version'){
            steps{
                script{
                    def packageJson = readJSON file: 'package.json'
                    packageVersion = packageJson.version
                    echo "application version : $packageVersion"
                }
            }
        }
        stage('Install Dependencies'){
            steps{
                sh """
                    npm install
                """
            }
        }
        stage('Unit Tests'){
            steps{
                sh """
                echo "Unit Tests will run here."
                """
            }
        }
        stage('Sonar Scanner'){
            steps{
                sh """
                    sonar-scanner
                """
            }
        }
        stage('Build'){
            steps{
                sh """
                    ls -la
                    zip -q -r catalogue.zip ./* -x ".git" -x "*.zip"
                    ls -ltr
                """
            }
        }
        stage('Publish Artifact'){
            steps{
                nexusArtifactUploader(
                nexusVersion: 'nexus3',
                protocol: 'http',
                nexusUrl: "${nexusURL}",
                groupId: 'com.roboshop',
                version: "${packageVersion}",
                repository: 'catalogue',
                credentialsId: 'CredentialsId',
                artifacts: [
                    [artifactId: 'catalogue',
                    classifier: '',
                    file: 'catalogue.zip',
                    type: 'zip']
                    ]
                )
            }
        }
        stage('Deploy'){
            steps{
                when {
                    expression{
                        params.Deploy == "true"
                    }
                }
                script{
                    build job: "catalogue-deploy", wait: true, parameters:[
                    string(name: 'version', value: "${packageVersion}")
                    string(name: 'environment', value: "dev")
                    ]
                }
            }
        }

    }
    post{
        always{
            deleteDir()
        }
    }
}